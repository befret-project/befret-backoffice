// Script pour v√©rifier les donn√©es de test du plan de test BEFRET
const { initializeApp } = require('firebase/app');
const { getFirestore, doc, getDoc, collection, query, where, getDocs } = require('firebase/firestore');

const firebaseConfig = {
  apiKey: "AIzaSyDgU_qyND7LXCY-hESIzUvu8jIqFflc_BE",
  authDomain: "befret-development.firebaseapp.com",
  databaseURL: "https://befret-development-default-rtdb.firebaseio.com",
  projectId: "befret-development",
  storageBucket: "befret-development.appspot.com",
  messagingSenderId: "384879116689",
  appId: "1:384879116689:web:d0e89a006a3111eec2da30",
  measurementId: "G-KYB5JZJNMG"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Liste des colis de test attendus
const expectedTestParcels = [
  { id: "BF-TEST-001", description: "R√©ception normale", weight: 2.5, city: "kinshasa", status: "pending" },
  { id: "BF-TEST-002", description: "√âcart poids mineur", weight: 3.0, city: "kinshasa", status: "pending" },
  { id: "BF-TEST-003", description: "√âcart poids majeur", weight: 2.0, city: "kinshasa", status: "pending" },
  { id: "BF-TEST-006", description: "Colis d√©j√† r√©ceptionn√©", weight: 1.8, city: "kinshasa", status: "to_warehouse" },
  { id: "BF-TEST-007", description: "Colis endommag√©", weight: 3.5, city: "kinshasa", status: "pending" },
  { id: "BF-TEST-002-P", description: "Suppl√©ment poids", weight: 2.0, city: "kinshasa", status: "to_warehouse" },
  { id: "BF-TEST-003-F", description: "Cas sp√©cial fragile", weight: 1.8, city: "kinshasa", status: "to_warehouse" },
  { id: "BF-TEST-004-L", description: "Tri Lubumbashi", weight: 3.2, city: "lubumbashi", status: "to_warehouse" }
];

const expectedLotParcels = [];
for (let i = 1; i <= 10; i++) {
  expectedLotParcels.push({
    id: `BF-LOT-${i.toString().padStart(3, '0')}`,
    description: `Lot ${i}`,
    city: i <= 5 ? "kinshasa" : "lubumbashi",
    zone: i <= 5 ? "A" : "B",
    status: "pending"
  });
}

async function verifyTestPlanData() {
  try {
    console.log('üîç V√âRIFICATION DES DONN√âES DE TEST - PLAN DE TEST BEFRET');
    console.log('================================================================');
    console.log('');
    
    let totalFound = 0;
    let totalExpected = expectedTestParcels.length + expectedLotParcels.length;
    
    // V√©rifier les colis principaux
    console.log('üß™ SPRINT 1 & 2 - COLIS PRINCIPAUX:');
    console.log('');
    
    for (const expected of expectedTestParcels) {
      const docRef = doc(db, 'parcel', expected.id);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        const statusCheck = data.status === expected.status ? "‚úÖ" : "‚ö†Ô∏è";
        const weightCheck = data.totalWeight === expected.weight ? "‚úÖ" : "‚ö†Ô∏è";
        const cityCheck = data.city === expected.city ? "‚úÖ" : "‚ö†Ô∏è";
        
        console.log(`‚úÖ ${expected.id} - ${expected.description}`);
        console.log(`   Status: ${data.status} ${statusCheck} | Poids: ${data.totalWeight}kg ${weightCheck} | Ville: ${data.city} ${cityCheck}`);
        console.log(`   Logistic Status: ${data.logisticStatus}`);
        
        totalFound++;
      } else {
        console.log(`‚ùå ${expected.id} - MANQUANT`);
      }
      console.log('');
    }
    
    // V√©rifier les lots
    console.log('üì¶ LOTS POUR TESTS GROUP√âS:');
    console.log('');
    
    let kinshasa = 0;
    let lubumbashi = 0;
    
    for (const expected of expectedLotParcels) {
      const docRef = doc(db, 'parcel', expected.id);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        const statusCheck = data.status === expected.status ? "‚úÖ" : "‚ö†Ô∏è";
        const cityCheck = data.city === expected.city ? "‚úÖ" : "‚ö†Ô∏è";
        
        console.log(`‚úÖ ${expected.id} - ${expected.description} (Zone ${expected.zone})`);
        console.log(`   Status: ${data.status} ${statusCheck} | Ville: ${data.city} ${cityCheck}`);
        
        if (data.city === "kinshasa") kinshasa++;
        if (data.city === "lubumbashi") lubumbashi++;
        
        totalFound++;
      } else {
        console.log(`‚ùå ${expected.id} - MANQUANT`);
      }
    }
    
    console.log('');
    console.log('üìä R√âSUM√â DE LA V√âRIFICATION:');
    console.log('================================================================');
    console.log(`üì¶ Total des colis de test: ${totalFound}/${totalExpected}`);
    console.log(`üéØ Colis principaux: ${totalFound - kinshasa - lubumbashi}/${expectedTestParcels.length}`);
    console.log(`üèôÔ∏è Lot Kinshasa (Zone A): ${kinshasa}/5`);
    console.log(`üè≠ Lot Lubumbashi (Zone B): ${lubumbashi}/5`);
    console.log('');
    
    if (totalFound === totalExpected) {
      console.log('üéâ SUCC√àS: Toutes les donn√©es de test sont pr√©sentes!');
      console.log('');
      console.log('üöÄ PR√äT POUR L\'EX√âCUTION DU PLAN DE TEST');
      console.log('   URL: https://befret-development-e3cb5.web.app');
      console.log('');
      console.log('üìã SC√âNARIOS DE TEST DISPONIBLES:');
      console.log('   ‚Ä¢ TC-R001: R√©ception normale (BF-TEST-001)');
      console.log('   ‚Ä¢ TC-R002: √âcart poids mineur (BF-TEST-002)');
      console.log('   ‚Ä¢ TC-R003: √âcart poids majeur (BF-TEST-003)');
      console.log('   ‚Ä¢ TC-R004: Colis non trouv√© (BF-FAKE-999)');
      console.log('   ‚Ä¢ TC-R005: R√©ception multiple (BF-LOT-001 √† 010)');
      console.log('   ‚Ä¢ TC-R006: Colis d√©j√† r√©ceptionn√© (BF-TEST-006)');
      console.log('   ‚Ä¢ TC-R007: Colis endommag√© (BF-TEST-007)');
      console.log('   ‚Ä¢ TC-P001: Pes√©e conforme (BF-TEST-001)');
      console.log('   ‚Ä¢ TC-P002: Pes√©e avec suppl√©ment (BF-TEST-002-P)');
      console.log('   ‚Ä¢ TC-P003: Cas sp√©cial fragile (BF-TEST-003-F)');
      console.log('   ‚Ä¢ TC-P004: Tri Lubumbashi (BF-TEST-004-L)');
      console.log('   ‚Ä¢ TC-P005: Lot de pes√©e (BF-LOT-001 √† 010)');
    } else {
      console.log('‚ö†Ô∏è ATTENTION: Certaines donn√©es de test sont manquantes');
      console.log('   Ex√©cutez: node scripts/create-test-plan-data.js');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

// Ex√©cuter la v√©rification
verifyTestPlanData();